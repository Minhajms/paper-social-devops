name: Deploy Paper.Social

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
    - name: Install dependencies
      run: |
        cd app
        npm install
    - name: Run tests
      run: |
        cd app
        npm test

  terraform:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
    - uses: actions/checkout@v3
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Format Terraform files
      run: |
        cd terraform
        terraform fmt

    - name: Terraform Init
      run: |
        cd terraform
        terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        IC_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

    - name: Terraform Plan
      if: github.event_name == 'pull_request'
      run: |
        cd terraform
        terraform plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        IC_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}

    - name: Terraform Plan Only
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd terraform
        terraform plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        IC_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}

    # Commenting out the actual apply for now to avoid potential costs
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: |
    #     cd terraform
    #     terraform apply -auto-approve
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     IC_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}

    # Since we're not actually creating resources, we'll use dummy outputs
    - name: Create Dummy Terraform Output
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cat > terraform-output.json << 'EOJSON'
        {
          "aws_instance_id": {
            "value": "i-dummy12345"
          },
          "aws_public_ip": {
            "value": "192.168.1.1"
          },
          "aws_public_dns": {
            "value": "ec2-192-168-1-1.us-east-1.compute.amazonaws.com"
          },
          "ibm_instance_id": {
            "value": "ibm-dummy67890"
          },
          "ibm_floating_ip": {
            "value": "192.168.2.2"
          }
        }
        EOJSON

    - name: Upload Terraform Output
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-output
        path: terraform-output.json

    # Create a dummy SSH key for demonstration
    - name: Create Dummy SSH Key
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        mkdir -p ~/.ssh
        ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
        cp ~/.ssh/id_rsa .

    - name: Upload SSH Key
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: ssh-key
        path: id_rsa

  ansible:
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      id-token: write
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible

    - name: Download Terraform Output
      uses: actions/download-artifact@v4
      with:
        name: terraform-output

    - name: Download SSH Key
      uses: actions/download-artifact@v4
      with:
        name: ssh-key

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        mv id_rsa ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

    - name: Generate Ansible Inventory
      run: |
        python -c '
        import json
        import os

        with open("terraform-output.json", "r") as f:
            tf_output = json.load(f)

        with open("ansible/inventory/hosts.yml", "w") as f:
            f.write("""---
        all:
          children:
            aws:
              hosts:
                aws_instance:
                  ansible_host: {}
                  ansible_connection: local # Using local connection for demo
            ibm:
              hosts:
                ibm_instance:
                  ansible_host: {}
                  ansible_connection: local # Using local connection for demo
          vars:
            ansible_user: ubuntu
            ansible_ssh_private_key_file: ~/.ssh/id_rsa
            ansible_python_interpreter: /usr/bin/python3
            ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        """.format(
                tf_output["aws_public_ip"]["value"],
                tf_output["ibm_floating_ip"]["value"]
            ))
        '

    # For demo purposes, just print the inventory instead of actually running Ansible
    - name: Show Ansible Inventory
      run: |
        cd ansible
        cat inventory/hosts.yml
        echo "In a real deployment, we would run: ansible-playbook -i inventory/hosts.yml site.yml"


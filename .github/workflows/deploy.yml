name: Deploy Paper.Social

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
    - name: Install dependencies
      run: |
        cd app
        npm install
    - name: Run tests
      run: |
        cd app
        npm test

  terraform:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
    - uses: actions/checkout@v3
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Format Terraform files
      run: |
        cd terraform
        terraform fmt

    - name: Terraform Init
      run: |
        cd terraform
        terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        IC_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

    - name: Terraform Plan
      if: github.event_name == 'pull_request'
      run: |
        cd terraform
        terraform plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        IC_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd terraform
        terraform apply -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        IC_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}

    - name: Save Terraform Output
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd terraform
        terraform output -json > ../terraform-output.json
        cp id_rsa ../id_rsa

    - name: Upload Terraform Output
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-output
        path: terraform-output.json

    - name: Upload SSH Key
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: ssh-key
        path: id_rsa

  ansible:
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      id-token: write
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible

    - name: Download Terraform Output
      uses: actions/download-artifact@v4
      with:
        name: terraform-output

    - name: Download SSH Key
      uses: actions/download-artifact@v4
      with:
        name: ssh-key

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        mv id_rsa ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H github.com >> ~/.ssh/known_hosts

    - name: Generate Ansible Inventory
      run: |
        python -c '
        import json
        import os

        with open("terraform-output.json", "r") as f:
            tf_output = json.load(f)

        with open("ansible/inventory/hosts.yml", "w") as f:
            f.write("""---
        all:
          children:
            aws:
              hosts:
                aws_instance:
                  ansible_host: {}
            ibm:
              hosts:
                ibm_instance:
                  ansible_host: {}
          vars:
            ansible_user: ubuntu
            ansible_ssh_private_key_file: ~/.ssh/id_rsa
            ansible_python_interpreter: /usr/bin/python3
            ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        """.format(
                tf_output["aws_public_ip"]["value"],
                tf_output["ibm_floating_ip"]["value"]
            ))
        '

    - name: Wait for SSH connectivity
      run: |
        python -c '
        import json
        import time
        import subprocess

        with open("terraform-output.json", "r") as f:
            tf_output = json.load(f)

        aws_ip = tf_output["aws_public_ip"]["value"]
        ibm_ip = tf_output["ibm_floating_ip"]["value"]

        def check_ssh(ip):
            for i in range(20):  # Try for about 5 minutes
                try:
                    print(f"Attempting to connect to {ip}...")
                    result = subprocess.run(
                        f"ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/id_rsa ubuntu@{ip} exit",
                        shell=True,
                        capture_output=True
                    )
                    if result.returncode == 0:
                        print(f"Successfully connected to {ip}")
                        return True
                    else:
                        print(f"Failed to connect to {ip}, retrying in 15 seconds...")
                except Exception as e:
                    print(f"Error connecting to {ip}: {e}")
                time.sleep(15)
            return False

        aws_success = check_ssh(aws_ip)
        ibm_success = check_ssh(ibm_ip)

        if not aws_success or not ibm_success:
            raise Exception("Could not establish SSH connections to one or more instances")
        '

    - name: Run Ansible Playbook
      run: |
        cd ansible
        ansible-playbook -i inventory/hosts.yml site.yml -v
